* {
    margin: 0;
    padding: 0;
    box-sizing: content-box;
}

body {
    font-family: Arial, Helvetica, sans-serif;
    min-height: 100vh;

    display: grid;
    grid-template-columns: repeat(9,1fr);
    grid-auto-rows: 50px auto 50px;
    grid-template-areas: 
       "hd hd hd hd hd hd hd hd hd"
       "mn mn mn mn mn mn mn sb sb"
       "ft ft ft ft ft ft ft ft ft";
    column-gap: 0.5rem; 
}

.el {
    background-color: rebeccapurple;
    columns: white;
    display: grid;
    place-content: center;
}

.header {
    grid-area: hd;
}

.sidebar {
    grid-area: sb;
    background-color: blue;
}

.footer {
    grid-area: ft;
}

.container {
    grid-area: mn;
    min-height: 400px;
    display: grid;
    /*  grid-auto-flow: row; 
        grid-auto-flow: column; */
    /*  grid-template-columns: 200px 2fr 1fr;  can be as fractions or pixels or both  */
    grid-template-columns: repeat(2,1fr 2fr);
    grid-auto-rows: minmax(150px, auto); 
    /* grid-template-rows and grid-auto-columns also can be used */
    /* column-gap: 1rem;
       row-gap: 1rem;
       can be given separately also like (gap: 1rem 0.5rem;) */
    gap: 1rem;

}

.box {
    background-color: black;
    color: white;
    font-size: 2rem;
    padding: 0.5rem;
}

.box:first-child {
    background-color: #00f;
    /*  grid-column-start: 1;  grid-column-end can also be a value less than grid-column-start
        grid-column-end and start, you can set it to -1 to specify the first grid line from the right. 
        grid-column-end: span 2; can also be used
        grid-column-end: 4;
        grid-row-start: 1;
        grid-row-end: 3; 
        The span keyword also works with grid-column.
        Grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.
        One example of this would be grid-area: 1 / 1 / 3 / 6;.*/
    grid-column: 1/4;
    grid-row: 1/3;
    /* For example, grid-template: 50% 50% / 200px; will create a grid with two rows that are 50% each, and one column that is 200 pixels wide. */

    /* can create individual nested grids too */
    display: grid;
    /* align-content: start;
    justify-content: end; */
    place-content: center; /* place-content is for both align-content and justify-content can be given values separaetrly too */
}

.box:nth-child(2) {
    background-color: purple;
    grid-column: 1/5;
    grid-row: 3/4;
}
